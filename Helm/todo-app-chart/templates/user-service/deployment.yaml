apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "todo-app.fullname" . }}-user-service
  namespace: {{ include "todo-app.namespace" . }}
  labels:
    {{- include "todo-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: user-service
spec:
  replicas: {{ .Values.userService.replicaCount }}
  selector:
    matchLabels:
      {{- include "todo-app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: user-service
  template:
    metadata:
      labels:
        {{- include "todo-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: user-service
    spec:
      initContainers:
      - name: wait-deps
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          until nc -zv {{ include "todo-app.fullname" . }}-postgres.{{ .Release.Namespace }}.svc.cluster.local 5432; do echo "waiting for postgres"; sleep 2; done
          until nc -zv {{ include "todo-app.fullname" . }}-rabbitmq.{{ .Release.Namespace }}.svc.cluster.local 5672; do echo "waiting for rabbitmq"; sleep 2; done
      containers:
      - name: user-service
        image: "{{ .Values.userService.image.repository }}:{{ .Values.userService.image.tag }}"
        imagePullPolicy: {{ .Values.userService.image.pullPolicy }}
        ports:
        - containerPort: 8000
        env:
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DEBUG
        - name: ALLOWED_HOSTS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: ALLOWED_HOSTS
        - name: CORS_ALLOWED_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: CORS_ALLOWED_ORIGINS
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        - name: DATABASE_URL
          value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@{{ include "todo-app.fullname" . }}-postgres.{{ .Release.Namespace }}.svc.cluster.local:5432/$(POSTGRES_DB)
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: RABBITMQ_DEFAULT_USER
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: RABBITMQ_DEFAULT_PASS
        - name: RABBITMQ_URL
          value: amqp://$(RABBITMQ_USER):$(RABBITMQ_PASS)@{{ include "todo-app.fullname" . }}-rabbitmq.{{ .Release.Namespace }}.svc.cluster.local:5672/
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 20
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
        resources:
          {{- toYaml .Values.userService.resources | nindent 10 }}
        command: ["sh","-c"]
        args:
        - |
          python manage.py migrate && python manage.py runserver 0.0.0.0:8000